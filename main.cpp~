#include <iostream>
#include "./common.h"
#include "../CSQ/Color.h"
#include "./ball.h"
#include "./math.h"
#include "../CSQ/Vec2.h"
#include "../CSQ/RigidBody.h"

#define PI 3.1415

using namespace std;

GLint window_width = 800;
GLint window_height = 600;

Ball cue_ball = Ball(10.0, kWhite);
Ball target_ball = Ball(10.0, kRed);

bool mouse_down = false;
Vec2 mouse_start;
Vec2 mouse_cur;

const GLfloat power_ratio = 0.001;
const GLfloat drag = 0.001;

// Vec2 v1 = Vec2(1, 3);
// Vec2 v2 = Vec2(6, 2);
// Vec2 v3 = v2+v3;

void Init() {
  glClearColor(0.94, 0.90, 0.66, 1.0);

  cue_ball.translate(window_width/2, window_height/2);
  target_ball.translate(window_width/4, window_height/4);

  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  gluOrtho2D(0, window_width, 0, window_height);
  glMatrixMode(GL_MODELVIEW);
}

void draw_ball(Ball b) {
  Color c = b.get_color();
  glColor3f(c.r, c.g, c.b);
  glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
  glBegin(GL_POLYGON);
  Vec2 pos = b.get_position();
  GLfloat rad = b.get_radius();
  for (int i = 0; i < 60; i++) {
    glVertex2f(pos.getX()+rad*cos(i*PI/30), pos.getY()+rad*sin(i*PI/30));
  }
  glEnd();
}

void draw_line(Vec2 v1, Vec2 v2) {
  glColor3f(0, 0, 0);
  glBegin(GL_LINES);
  glVertex2f(v1.getX(), v1.getY());
  glVertex2f(v2.getX(), v2.getY());
  glEnd();
}

void Display() {
  glClear(GL_COLOR_BUFFER_BIT);
  draw_ball(cue_ball);
  draw_ball(target_ball);
  if(mouse_down) {
    draw_line(mouse_start, mouse_cur);
  }
  glFlush();
}

void Mouse(int button, int button_mode, int x, int y) {
  if (button == GLUT_LEFT_BUTTON) {
    if (button_mode == GLUT_DOWN) {
      mouse_start = Vec2(x, window_height-y);
      mouse_cur = mouse_start;
      mouse_down = true;
    } else if (button_mode == GLUT_UP) {
      Vec2 impulse = mouse_start;
      impulse = impulse.subtract(Vec2(x, window_height-y));
      impulse = impulse.scale(power_ratio);
      cue_ball.apply_impulse(impulse);
      mouse_down = false;
    }
  }
}

void Motion(int x, int y) {
  mouse_cur = Vec2(x, window_height-y);
  glutPostRedisplay();
}

void Idle() {
  cue_ball.move(1);
  target_ball.move(1);
  cue_ball.apply_drag(drag);
  target_ball.apply_drag(drag);
  glutPostRedisplay();
}

int main(int argc, char** argv) {
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
  glutInitWindowSize(window_width, window_height);
  glutInitWindowPosition(0, 0);
  glutCreateWindow("Billiards");
  glutDisplayFunc(Display);
  glutMouseFunc(Mouse);
  glutMotionFunc(Motion);
  glutIdleFunc(Idle);
  Init();

  glutMainLoop();
}
